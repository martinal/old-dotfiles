""" Map leader to space
let mapleader=" "

""" Plugins

" File tree control as nerdtree:
" :NERDTree
" :NERDTreeFocus
" :NERDTreeToggle
" :NERDTreeClose
" :NERDTreeFind
" :NERDTreeRefreshRoot
"
" Most of the original commands in the project tree are supported:
" o	Open files, directories and bookmarks	g:NERDTreeMapActivateNode
" go	Open selected file, but leave cursor in the NERDTree	g:NERDTreeMapPreview
" t	Open selected node/bookmark in a new tab	g:NERDTreeMapOpenInTab
" T	Same as 't' but keep the focus on the current tab	g:NERDTreeMapOpenInTabSilent
" i	Open selected file in a split window	g:NERDTreeMapOpenSplit
" gi	Same as i, but leave the cursor on the NERDTree	g:NERDTreeMapPreviewSplit
" s	Open selected file in a new vsplit	g:NERDTreeMapOpenVSplit
" gs	Same as s, but leave the cursor on the NERDTree	g:NERDTreeMapPreviewVSplit
"
" O	Recursively open the selected directory	g:NERDTreeMapOpenRecursively
" x	Close the current nodes parent	g:NERDTreeMapCloseDir
" X	Recursively close all children of the current node	g:NERDTreeMapCloseChildren
"
" P	Jump to the root node	g:NERDTreeMapJumpRoot
" p	Jump to current nodes parent	g:NERDTreeMapJumpParent
" K	Jump up inside directories at the current tree depth	g:NERDTreeMapJumpFirstChild
" J	Jump down inside directories at the current tree depth	g:NERDTreeMapJumpLastChild
" <C-J>	Jump down to next sibling of the current directory	g:NERDTreeMapJumpNextSibling
" <C-K>	Jump up to previous sibling of the current directory	g:NERDTreeMapJumpPrevSibling
"
" r	Recursively refresh the current directory	g:NERDTreeMapRefresh
" R	Recursively refresh the current root	g:NERDTreeMapRefreshRoot
"
" m	Display the NERDTree menu	g:NERDTreeMapMenu
" q	Close the NERDTree window	g:NERDTreeMapQuit
" A	Zoom (maximize/minimize) the NERDTree window	g:NERDTreeMapToggleZoom
"
" Overriding commands via let is also supported (like this: https://superuser.com/a/197977/909473)
set NERDTree

" text objects ii, ai, aI
set textobj-indent

" https://github.com/AlexPl292/IdeaVim-EasyMotion#supported-commands
" Lots of keymaps in URL, based on <leader>+<leader>+...
set easymotion

" https://github.com/tpope/vim-surround
" normal mode: cs, ds, e.g. cs[( changes [ to (
" BUG: ys does not work
" visual mode: S<char> e.g. S(
" cs([ adds spaces inside braces
" cs)] does not
set surround

" https://github.com/terryma/vim-multiple-cursors
" According to ideavim page:
" <A-n>, <A-x>, <A-p>, g<A-n>
" but A-... opens menus...
set multiple-cursors
"et g:multi_cursor_use_default_mapping=0
"et g:multi_cursor_start_word_key      = '<C-n>'
"et g:multi_cursor_select_all_word_key = '<A-n>'
"et g:multi_cursor_start_key           = 'g<C-n>'
"et g:multi_cursor_select_all_key      = 'g<A-n>'
"et g:multi_cursor_next_key            = '<C-n>'
"et g:multi_cursor_prev_key            = '<C-p>'
"et g:multi_cursor_skip_key            = '<C-x>'
"et g:multi_cursor_quit_key            = '<Esc>'

" https://github.com/tpope/vim-commentary
" gcc, gc + motion, v_gc
set commentary

" https://github.com/vim-scripts/ReplaceWithRegister
" gr, grr
" Works this way: "ay(something), visual mode, "agr
" BUG: grr doesn't seem to work?
set ReplaceWithRegister

" https://www.vim.org/scripts/script.php?script_id=2699
" Additional text objects: aa, ia
" cia, daa works great when on argument
set argtextobj

" https://github.com/kana/vim-textobj-entire
" Additional text objects: ae, ie
set textobj-entire

" https://github.com/tommcdo/vim-exchange
" cx, cxx, X, cxc
" Example: cxiw, move to other word, .
" Example: cxx, move to other line, .
" Example: visual selection, X, other visual selection, X
set exchange

" https://github.com/machakann/vim-highlightedyank
" if you want to optimize highlight duration, assign a time in milliseconds:
" let g:highlightedyank_highlight_duration = "1000"
" A negative number makes the highlight persistent.
" let g:highlightedyank_highlight_duration = "-1"
" if you want to change background color of highlight you can provide the rgba of the color you want e.g.
" let g:highlightedyank_highlight_color = "rgba(160, 160, 160, 155)"
set highlightedyank


""" Plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>"

""" Common settings -------------------------
set showmode
set showcmd
set number
set scrolloff=5
set hlsearch
set incsearch
set ignorecase
set smartcase

""" Idea specific settings ------------------
set ideajoin

" `idearefactormode` `idearefactormode` String(default "select")
" 
"              Define the mode that would be enabled during
"              the refactoring (renaming, live template, introduce variable, etc)
"              
"              Use one of the following values:
"              - keep  - keep the mode that was enabled before starting a refactoring
"              - select - start refactoring in select mode
"              - visual - start refactoring in visual mode
"              
"              This option has effect if you are in normal, insert or replace mode before refactoring start.
"              Visual or select mode are not changed.
set idearefactormode=keep

set clipboard=ideaput

""" Mappings --------------------------------

" a ???

" b breakpoints:
" map <leader>ba show all breakpoints
map <leader>bb <Action>(ToggleLineBreakpoint)
" map <leader>ba add breakpoint
" map <leader>br remove breakpoint
" map <leader>bd disable breakpoint
" map <leader>be disable breakpoint
" map <leader>bn next breakpoint
" map <leader>bp prev breakpoint

" c ???

" d debugging:
map <leader>db <Action>(StopBackgroundProcesses)
map <leader>dc <Action>(GoCoreDumpAction)
" map <leader>dd <Action>(Debug)
map <leader>dd <Action>(Rerun)
map <leader>di <Action>(StepInto)
map <leader>dI <Action>(ForceStepInto)
map <leader>dm <Action>(StepIntoMyCode)
map <leader>do <Action>(StepOver)
map <leader>dO <Action>(ForceStepOver)
map <leader>dr <Action>(RunToCursor)
map <leader>dR <Action>(ForceRunToCursor)
map <leader>ds <Action>(Stop)
map <leader>du <Action>(StepOut)

" e ???

" f find:
" map <leader>fp find in project files
" map <leader>fg find in git files
" map <leader>fd find in directory
" map <leader>fa find action
" map <leader>fn find filename
" "GoCallHierarchyPopupMenu
" "GoCallHierarchyPopupMenu.BaseOnThisDeclaration     <A-C-H>
" "GoTypeHierarchyPopupMenu
" GotoNextError

" g generate:
map <leader>gt <Action>(GoTestGenerateGroup)
map <leader>gc <Action>(GoGenerateConstructorAction)
map <leader>gf <Action>(GoGenerateFileAction)
map <leader>gs <Action>(GoGenerateForStruct)
map <leader>gg <Action>(GoGenerateGetterAction)
" map <leader>gG <Action>(GoGenerateGetterSetterAction)
map <leader>gG <Action>(GoGenerateSetterAction)

" h ???

" i ???

" j ???

" k ???

" l ???

" m move:
map <leader>me <Action>(GotoNextError)
map <leader>ms <Plug>(easymotion-s)
map <leader>mf <Plug>(easymotion-f)

" Bookmarks
" Bookmarks.Goto
" Bookmarks.Toggle


" n ???

" o ???

" p ???

" q ???

" r refactoring:
map <leader>rc <Action>(IntroduceConstant)
map <leader>rf <Action>(IntroduceField)
map <leader>ri <Action>(Inline)
map <leader>rm <Action>(ImplementMethods)
map <leader>rp <Action>(IntroduceParameter)
map <leader>rP <Action>(IntroduceParameterObject)
map <leader>rr <Action>(RenameElement)
map <leader>rv <Action>(IntroduceVariable)
map <leader>ra <Action>(Refactor) " change signature
" map <leader>rs <Action>() " fill struct
" map <leader>rS <Action>() " fill struct recursively

" s ???

" t testing:
map <leader>td <Action>(Debug)
map <leader>tf <Action>(RerunFailedTests)
map <leader>tr <Action>(Run)
map <leader>tR <Action>(Rerun)
map <leader>tt <Action>(RerunTests)
" map <leader>tt rerun last run test
" map <leader>tr run test under cursor
" map <leader>ta run test package
" map <leader>tn next test (?)
" map <leader>tp prev test (?)

" u ???

" v version control:
map <leader>va <Action>(Annotate)
map <leader>vh <Action>(Vcs.ShowTabbedFileHistory)
map <leader>vj <Action>(VcsShowNextChangeMarker)
map <leader>vk <Action>(VcsShowPrevChangeMarker)
map <leader>vr <Action>(Vcs.RollbackChangedLines)

" w window management:
map <leader>wf <Action>(SelectInProjectView)
map <leader>wo <Action>(FileStructurePopup)
map <leader>wt <Action>(NERDTreeToggle)
map <leader>wz <Action>(ToggleDistractionFreeMode)
" IncreaseColumnWidth                                <C-S-Right>
" IncrementWindowHeight                              <C-S-Down>
" IncrementWindowWidth                               <C-S-Right>

" x execute:
map <leader>xf <Action>(GoFmtFileAction)
map <leader>xi <Action>(GoImportsFileAction)
map <leader>xn <Action>(Go.NewGoFile)
map <leader>xp <Action>(GoFmtProjectAction)
map <leader>xv <Action>(GoVetFileAction)

" y ???

" z ???


" ------------------------------------------------------------------------------------
" Supported settings
"
" `keymodel`       `km`       String (default "continueselect,stopselect")
" 
"              List of comma separated words, which enable special things that keys
"              can do. These values can be used:
"                startsel           Using a shifted special[1] key starts selection (either
"                                   Select mode or Visual mode, depending on "key" being
"                                   present in 'selectmode').
"                stopsel            Using a NOT-shifted special[1] key stops selection.
"                                   Automatically enables `stopselect` and `stopvisual`
"                stopselect         Using a NOT-shifted special[1] key stops     - IdeaVim ONLY
"                                   select mode and removes selection.
"                stopvisual         Using a NOT-shifted special[1] key stops     - IdeaVim ONLY
"                                   visual mode and removes selection.
"                continueselect     Using a shifted arrow key doesn't       - IdeaVim ONLY
"                                   start selection, but in select mode
"                                   acts like startsel is enabled
"                continuevisual     Using a shifted arrow key doesn't       - IdeaVim ONLY
"                                   start selection, but in visual mode
"                                   acts like startsel is enabled
" 
" 'matchpairs'     'mps'   pairs of characters that "%" can match
" 'more'           'more'  When on, listings pause when the whole screen is filled.
" 'nrformats'      'nf'    number formats recognized for CTRL-A command
" 'scroll'         'scr'   lines to scroll with CTRL-U and CTRL-D
" 'scrolljump'     'sj'    minimum number of lines to scroll
" 'selection'      'sel'   what type of selection to use
" 
" `selectmode`     `slm`   String (default "")
" 
"              This is a comma-separated list of words, which specify when to start
"              Select mode instead of Visual mode, when a selection is started.
"              Possible values:
"                mouse           when using the mouse
"                key             when using shifted special[1] keys
"                cmd             when using "v", "V", or <C-V>
"                ideaselection   when IDE sets a selection      - IdeaVim ONLY
"                                (examples: extend selection, wrap with while, etc.)
" 
" 'sidescroll'     'ss'        minimum number of columns to scroll horizontally
" 'sidescrolloff'  'siso'      min. number of columns to left and right of cursor
" 'timeout'        'to'        use timeout for mapped key sequences
" 'timeoutlen'     'tm'        timeout duration for a mapped key sequence
" 'undolevels'     'ul'        maximum number of changes that can be undone
" 'viminfo'        'vi'        information to remember after restart
" 'visualbell'     'vb'        use visual bell instead of beeping
" 'wrapscan'       'ws'        searches wrap around the end of file
" 
" 
" 
" IdeaVim only commands:
" 
" 
" 
" `ideajoin`      `ideajoin` Boolean (default false)
" 
"               If true, join command will be performed via IDE
"               See wiki/`ideajoin` examples
"
" `ideawrite`     `ideawrite` String (default "all") [To Be Released]
"               "file" or "all". Defines the behaviour of ":w" command.
"               Value "all" enables execution of ":wa" (save all) command on ":w" (save).
"               This feature exists because some IJ options like "Prettier on save" or "ESlint on save"
"                    work only with "save all" action. If this option is set to "all", these actions work
"                    also with ":w" command.
"               
" `lookupkeys`    `lookupkeys`   List of strings
" 
"               List of keys that should be processed by the IDE during the active lookup (autocompletion).
"               For example, <Tab> and <Enter> are used by the IDE to finish the lookup,
"                     but <C-W> should be passed to IdeaVim.
"               Default value: 
"                     "<Tab>", "<Down>", "<Up>", "<Enter>", "<Left>", "<Right>",
"                     "<C-Down>", "<C-Up>", "<PageUp>", "<PageDown>",
"                     "<C-J>", "<C-Q>"
" 
" ----------
" [1] - cursor keys, <End>, <Home>, <PageUp> and <PageDown>
